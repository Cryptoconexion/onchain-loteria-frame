{"abi":[{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/aaaa.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/test/=node_modules/@prb/test/\",\":ds-test/=lib/ds-test/\",\":forge-std/=node_modules/forge-std/\"]},\"sources\":{\"src/aaaa.sol\":{\"keccak256\":\"0x97ef53366913f37623acfeec93e4304c93e6ce0c4e9a7b4058b7d42bffbf8fee\",\"license\":\"MIT License\",\"urls\":[\"bzz-raw://d7a135d9b4d47fba318b5d28de05c4317fc3255d9afdf28210f75a287bb54c0e\",\"dweb:/ipfs/QmdQ2Ssm1zNAbo4jvRvshZ86M9JyyFGashvhNTE7iGR62k\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","@prb/test/=node_modules/@prb/test/","ds-test/=lib/ds-test/","forge-std/=node_modules/forge-std/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/aaaa.sol":"ERC165"},"evmVersion":"paris","libraries":{}},"sources":{"src/aaaa.sol":{"keccak256":"0x97ef53366913f37623acfeec93e4304c93e6ce0c4e9a7b4058b7d42bffbf8fee","urls":["bzz-raw://d7a135d9b4d47fba318b5d28de05c4317fc3255d9afdf28210f75a287bb54c0e","dweb:/ipfs/QmdQ2Ssm1zNAbo4jvRvshZ86M9JyyFGashvhNTE7iGR62k"],"license":"MIT License"}},"version":1},"id":54}