{"abi":[{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OnchainLoteriaFlat.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/test/=node_modules/@prb/test/\",\":ds-test/=lib/ds-test/\",\":forge-std/=node_modules/forge-std/\"]},\"sources\":{\"src/OnchainLoteriaFlat.sol\":{\"keccak256\":\"0x6395af6e375b795d34397a8e7e07dffbb1a1fcf83d417c3bb29c94b1aa34ed88\",\"license\":\"MIT License\",\"urls\":[\"bzz-raw://3bf61ee0bc83b5420aed23476b5d5ebf367e88845ece2b5a47af9246880fd2b3\",\"dweb:/ipfs/QmQe3mY8Qd3ViLyKi6duDQTHRAfZKcwhEicMRnarrKyxeB\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","@prb/test/=node_modules/@prb/test/","ds-test/=lib/ds-test/","forge-std/=node_modules/forge-std/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/OnchainLoteriaFlat.sol":"ReentrancyGuard"},"evmVersion":"paris","libraries":{}},"sources":{"src/OnchainLoteriaFlat.sol":{"keccak256":"0x6395af6e375b795d34397a8e7e07dffbb1a1fcf83d417c3bb29c94b1aa34ed88","urls":["bzz-raw://3bf61ee0bc83b5420aed23476b5d5ebf367e88845ece2b5a47af9246880fd2b3","dweb:/ipfs/QmQe3mY8Qd3ViLyKi6duDQTHRAfZKcwhEicMRnarrKyxeB"],"license":"MIT License"}},"version":1},"id":50}